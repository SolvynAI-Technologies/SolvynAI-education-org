
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  // Get the DeepSeek API key from environment variables
  const apiKey = Deno.env.get('DEEPSEEK_API_KEY');
  
  console.log('DeepSeek API key configured:', !!apiKey);
  
  if (!apiKey) {
    console.error('DeepSeek API key not found in environment variables');
    return new Response(
      JSON.stringify({ error: 'DeepSeek API key not configured' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }

  try {
    const { prompt, service, context } = await req.json();
    
    console.log('Received request for service:', service, 'prompt length:', prompt?.length);
    
    // Create appropriate system instructions based on service type
    let systemInstruction = "";
    
    switch(service) {
      case 'doubt-solver':
        systemInstruction = "You are an expert educational tutor specializing in solving student doubts. Provide step-by-step explanations that are clear and focused on helping students understand the concepts deeply. Include relevant examples and visuals when needed.";
        break;
      case 'answer-analyzer':
        systemInstruction = "You are an experienced teacher analyzing student answer sheets. Provide detailed feedback on the strengths and weaknesses of the answer, suggest improvements, and grade the response according to academic standards. Be constructive and highlight specific points for improvement.";
        break;
      case 'question-generator':
        systemInstruction = "You are a professional question paper designer for educational institutions. Generate questions that are clear, unambiguous, and appropriately challenging for the specified grade level. Include a variety of question types (multiple choice, short answer, long answer) as requested.";
        break;
      default:
        systemInstruction = "You are a helpful AI education assistant providing clear, accurate information to students.";
    }

    console.log('Making API request to DeepSeek...');

    // Make the API request to DeepSeek
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "deepseek-chat",
        messages: [
          {
            role: "system",
            content: systemInstruction
          },
          ...(context ? context.map((msg: any) => ({ role: msg.role, content: msg.content })) : []),
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      }),
    });

    console.log('DeepSeek API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('DeepSeek API error:', response.status, errorText);
      throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('DeepSeek API response received successfully');

    const responseContent = data.choices?.[0]?.message?.content;
    if (!responseContent) {
      console.error('No content in DeepSeek response:', data);
      throw new Error('No response content generated by DeepSeek');
    }

    return new Response(
      JSON.stringify({ 
        response: responseContent,
        usage: data.usage
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error("Error calling DeepSeek API:", error);
    
    return new Response(
      JSON.stringify({ error: error.message || "An unexpected error occurred" }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});
